---

import { startViewTransition } from '../utils/navigations';

interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
    <!-- para ver las transicciones dentro del mismo sitio -->
    <meta name="view-transition" content="same-origin" />
  </head>
  <body>
    <div id="content">
      <slot />
    </div>
  </body>
</html>

<script is:inline>
  if (document.startViewTransition) {
  window.navigation.addEventListener('navigate', (event) => {
    const toUrl = new URL(event.destination.url);
    // es una pagina externa? si es asi, lo ignoramos
    if (location.origin !== toUrl.origin) return;
    // si es una navegacion en el mismo dominio, hacemos lo siguiente:
    event.intercept({
      async handler () {
          // vamos a cargar la pagina de destino
      // utilizando un fetch para obtener el HTML
      const response = await fetch(url); // => /clean-code
      // obtener el contenido del html
      const text = await response.text();
      // quedarnos solo con el contenido del html dentro de la etiqueta body
      // usamos un regex para obtenerlo
      const match = text.match(/<body[^>]*>([\s\S]*)<\/body>/);
      const data =  match ? match[1] : "";
      console.log('data', data);
        
        // utilizar la api de view transition API
        document.startViewTransition(() => {
          // como tiene que actualizar la vista
          document.body.innerHTML = data;
          // el scroll hacia arriba del todo
          document.documentElement.scrollTop = 0;
        });
      },
    });
  });
}
</script>

<!-- <script is:inline src="../utils/navigations.js">
  startViewTransition();
</script>  -->
